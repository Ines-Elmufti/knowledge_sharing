{"config":{"lang":["en","fr"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"home/","title":"Welcome","text":"<p>This is the home page. it serves as the gateway to our project, offering a comprehensive overview and detailed explanation of its purpose, objectives, and requirements.</p>"},{"location":"home_page/home/","title":"home page","text":"<p>hello</p>"},{"location":"scripts/compute_rmsd/","title":"scripts","text":"<p>(Please note that this page exists only in english. check home page to test translation feature) </p>"},{"location":"scripts/compute_rmsd/#compute_rmsd.compute_rmsd_value","title":"<code>compute_rmsd_value(input_model1, input_model2, alignment_chain_ids)</code>","text":"<p>Align models and compute RMSD value .</p> <p>Parameters:</p> Name Type Description Default <code>input_model1</code> <code>model</code> <p>First Bioblocks structure model</p> required <code>input_model2</code> <code>int</code> <p>Second Bioblocks structure model.</p> required <code>alignment_chain_ids</code> <code>list</code> <p>shared chain used for alignment</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If any chain ids in the input models are no identical.</p> <p>Returns:</p> Type Description <code>Model</code> <p>A new model in which all chains are reindexed consistently.</p> Source code in <code>scripts/compute_rmsd.py</code> <pre><code>def compute_rmsd_value(input_model1: Model, input_model2: Model, alignment_chain_ids:list) -&gt; Model:\n    \"\"\"Align models and compute RMSD value .\n\n    Args:\n        input_model1 (model): First Bioblocks structure model\n        input_model2 (int): Second Bioblocks structure model.\n        alignment_chain_ids: shared chain used for alignment\n\n    Raises:\n        ValueError: If any chain ids in the input models are no identical.\n\n    Returns:\n        A new model in which all chains are reindexed consistently.\n    \"\"\"\n    # Check that we have been given a homomer: All chain sequences must be identical,\n    # otherwise an error must be raised.\n    model_1 = read_model(input_model1, suppress_warnings=True)\n    model_2 = read_model(input_model2, suppress_warnings=True)\n    if all(chain_id in model_1.get_chains() for chain_id in alignment_chain_ids) and all(chain_id in model_2.get_chains() for chain_id in alignment_chain_ids):\n        aligned_model_1 = usalign_models(\n            moving_model=model_1,\n            static_model=model_2,\n            alignment_chain_ids=[alignment_chain_ids]\n)\n    else:\n        raise ValueError(\n            \"chains don't match\"\n        )\n    rmsd_value = rmsd.compute_rmsd_between_models(aligned_model_1, model_2, chain_ids=[alignment_chain_ids])\n\n    return rmsd_value\n</code></pre>"},{"location":"fr/home/","title":"Bienvenue sur Notre Page d'Accueil","text":"<p>Ici vous trouvez un aper\u00e7u complet et une explication d\u00e9taill\u00e9e de notre projet, de ses objectifs et de ses exigences</p>"},{"location":"fr/home_page/home/","title":"home page","text":"<p>salut</p>"}]}